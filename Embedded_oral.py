from tkinter import *
import pyttsx3
top=Tk()
def n1():
    f1=Frame(top)
    f1.pack(side=LEFT)
    def n3():
        f5=Frame(top,pady=100)
        f5.pack(side=TOP)
        l2=Button(top,text="EXIT",width="10",command=f5.destroy).place(x=1200,y=50)
        def t1():
            engine = pyttsx3.init()

            # say method on the engine that passing input text to be spoken
            engine.setProperty('rate', 100)
            engine.say('T08bit is Used For Selecting the Timer Mode')
            engine.say(' When T08bit  IS 1 TIMER is in 8Bit Mode ')
            engine.say(' WhenT08bit Is  0  TIMER  is in 16Bit Mode ')
            # run and wait method, it processes the voice commands.
            engine.runAndWait()


            # run and wait method, it processes the voice commands.
        def t2():
            engine = pyttsx3.init()

            # say method on the engine that passing input text to be spoken
            engine.setProperty('rate', 100)
            engine.say('TMR0ON  USED for on the Timer on ')
            engine.say(' WhenTMR0ON  1 TIMER   is ON ')
            engine.say(' WhenTMR0ON  0 TIMER  is OFF ')
            # run and wait method, it processes the voice commands.
            engine.runAndWait()
        def t3():
            engine = pyttsx3.init()

            # say method on the engine that passing input text to be spoken
            engine.setProperty('rate', 100)
            engine.say('TOCS IS USED TO SELECT CLOCK SOURCE ')
            engine.say(' When TOCS  1 Transition on inpput Edge ')
            engine.say(' When T0cs   0  Uses Internal Clock ')
            # run and wait method, it processes the voice commands.
            engine.runAndWait()
        def t4():
            engine = pyttsx3.init()

            # say method on the engine that passing input text to be spoken
            engine.setProperty('rate', 100)
            engine.say('T0SE USED FOR SOURCE EDGE SELECTING')
            engine.say(' When T0SE  1 Increment on HIGH TO LOW ')
            engine.say(' When T0SE  0  ICREMENT ON LOW TO HIGH ')
            # run and wait method, it processes the voice commands.
            engine.runAndWait()
        def t5():
            engine = pyttsx3.init()

            # say method on the engine that passing input text to be spoken
            engine.setProperty('rate', 100)
            engine.say('PSA USED FOR PRE SCALER ASSIGNMENT')
            engine.say(' When PSA  1  PRE SCALER NOT ASSIGNED ')
            engine.say(' When PSA   0  PRE SCALER ASSIGNED ')
            # run and wait method, it processes the voice commands.
            engine.runAndWait()
        def t6():
            engine = pyttsx3.init()

            # say method on the engine that passing input text to be spoken
            engine.setProperty('rate', 100)
            engine.say('PRE SCALER VALUE')
            engine.say(' VALUE CAN BE 1 OR 0 ')
            # run and wait method, it processes the voice commands.
            engine.runAndWait()


        b1=Button(f5,text="TMR0ON",width="10",height="10",command=t2)
        b1.pack(side=LEFT)
        b2 = Button(f5, text="T08bit",width="10",height="10",command=t1)
        b2.pack(side=LEFT)
        b3 = Button(f5, text="T0CS",width="10",height="10",command=t3)
        b3.pack(side=LEFT)
        b4 = Button(f5, text="T0SE",width="10",height="10",command=t4)
        b4.pack(side=LEFT)
        b5= Button(f5, text="PSA",width="10",height="10",command=t5)
        b5.pack(side=LEFT)
        b6 = Button(f5, text="TOPS2",width="10",height="10",command=t6)
        b6.pack(side=LEFT)
        b7 = Button(f5, text="TOPS1",width="10",height="10",command=t6)
        b7.pack(side=LEFT)
        b8 = Button(f5, text="TOPS0",width="10",height="10",command=t6)
        b8.pack(side=LEFT)
    def n4():
        f5 = Frame(top, pady=100)
        f5.pack(side=TOP)
        l4=Button(top,text="EXIT",width="10",command=f5.destroy).place(x=1200,y=50)
        b1 = Button(f5, text="RD16", width="10", height="10")
        b1.pack(side=LEFT)
        b2 = Button(f5, text="T1RUN", width="10", height="10")
        b2.pack(side=LEFT)
        b3 = Button(f5, text="T1CKPS1", width="10", height="10")
        b3.pack(side=LEFT)
        b4 = Button(f5, text="T1CKPS0", width="10", height="10")
        b4.pack(side=LEFT)
        b5 = Button(f5, text="T1OSCEN", width="10", height="10")
        b5.pack(side=LEFT)
        b6 = Button(f5, text="T1SYNC", width="10", height="10")
        b6.pack(side=LEFT)
        b7 = Button(f5, text="TMR1CS", width="10", height="10")
        b7.pack(side=LEFT)
        b8 = Button(f5, text="TOPS0", width="10", height="10")
        b8.pack(side=LEFT)
    def n5():
            f5 = Frame(top, pady=100)
            f5.pack(side=TOP)
            l4 = Button(top, text="EXIT", width="10", command=f5.destroy).place(x=1200, y=50)
            b1 = Button(f5, text="0", width="10", height="10")
            b1.pack(side=LEFT)
            b2 = Button(f5, text="T2OUTPS3", width="10", height="10")
            b2.pack(side=LEFT)
            b3 = Button(f5, text="T2OUTPS2", width="10", height="10")
            b3.pack(side=LEFT)
            b4 = Button(f5, text="T2OUTPS1", width="10", height="10")
            b4.pack(side=LEFT)
            b5 = Button(f5, text="T2OUTPS0", width="10", height="10")
            b5.pack(side=LEFT)
            b6 = Button(f5, text="TMR2ON", width="10", height="10")
            b6.pack(side=LEFT)
            b7 = Button(f5, text="T2CKPS1", width="10", height="10")
            b7.pack(side=LEFT)
            b8 = Button(f5, text="T2CKPS0", width="10", height="10")
            b8.pack(side=LEFT)
    def n6():
        f5 = Frame(top, pady=100)
        f5.pack(side=TOP)
        l4 = Button(top, text="EXIT", width="10", command=f5.destroy).place(x=1200, y=50)
        b1 = Button(f5, text="RD16", width="10", height="10")
        b1.pack(side=LEFT)
        b2 = Button(f5, text="T3ECCP", width="10", height="10")
        b2.pack(side=LEFT)
        b3 = Button(f5, text="T3CKPS1", width="10", height="10")
        b3.pack(side=LEFT)
        b4 = Button(f5, text="T3CKPS0", width="10", height="10")
        b4.pack(side=LEFT)
        b5 = Button(f5, text="T3CCP1", width="10", height="10")
        b5.pack(side=LEFT)
        b6 = Button(f5, text="T3SYNC", width="10", height="10")
        b6.pack(side=LEFT)
        b7 = Button(f5, text="TMR3CS", width="10", height="10")
        b7.pack(side=LEFT)
        b8 = Button(f5, text="TMR3ON", width="10", height="10")
        b8.pack(side=LEFT)
    def n2():
        f4=Frame(top)
        f4.pack(side=RIGHT)
        b2 = Button(f4, text="TIMER 0", width="20",command=n3).grid(row=0, column=1)
        b2 = Button(f4, text="TIMER 1", width="20",command=n4).grid(row=1, column=1)
        b3 = Button(f4, text="TIMER 2", width="20",command=n5).grid(row=2, column=1)
        b4 = Button(f4,text="TIMER 3 ",width="20",command=n6).grid(row=3,column=1)
    b2=Button(f1,text="INTRODUCTION",width="20").grid(row=0,column=1)
    b2 = Button(f1, text="INPUT SETTING", width="20").grid(row=1, column=1)
    b3 = Button(f1, text="OUTPUT SETTINGS", width="20").grid(row=2, column=1)
    b1=Button(f1,text="TIMERS",width="20",command=n2).grid(row=3,column=1)
    b2 = Button(f1, text="ADC",width="20").grid(row=4, column=1)
    b3=Button(f1,text="Interrupts",width="20").grid(row=5,column=1)
    b1=Button(f1,text="COUNTERS",width="20").grid(row=6,column=1)
    b2 = Button(f1, text="PWM",width="20").grid(row=7, column=1)
    b3=Button(f1,text="BLINk",width="20").grid(row=8,column=1)
    b4 = Button(f1, text="USART", width="20").grid(row=9, column=1)
menubar=Menu(top)
show=Menu(menubar,tearoff=0)
show.add_command(label="PIC ",command=n1)
show.add_command(label="Atmega32")
show.add_command(label="ARM")
show.add_command(label="ARDUINO")
menubar.add_cascade(label="Show",menu=show)
file=Menu(menubar,tearoff=0)
file.add_command(label="OPEN ")
file.add_command(label="SAVE")
file.add_command(label="CUT")
file.add_command(label="CUT")
menubar.add_cascade(label="FILE",menu=file)
edit=Menu(menubar,tearoff=0)
edit.add_command(label="COPY")
edit.add_command(label="PASTE")
edit.add_command(label="CUT")
edit.add_command(label="DELETE")
menubar.add_cascade(label="EDIT",menu=edit)
more=Menu(menubar,tearoff=0)
more.add_command(label="OPEN EDITOR")
more.add_command(label="Connect ")
more.add_command(label="share")
more.add_command(label="CHECK")
menubar.add_cascade(label="MORE",menu=more)
top.config(menu=menubar)
top.mainloop()